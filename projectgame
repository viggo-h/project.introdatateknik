import pygame
import sys
pygame.init()

# Skapa fönstret
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Pygame")

# Bakgrundsbild
background_image = pygame.image.load("background.png")
background_image = pygame.transform.scale(background_image, (800, 600))  

#Bilder för hinder
brick_wall = pygame.image.load("brick_wall.jpg")
brick_wall = pygame.transform.scale(brick_wall, (100, 20))

# Färger 
black = (0, 0, 0)
white = (255, 255, 255)
blue=(0,0,255)
red = (255, 0, 0)
silver =(192, 192, 192)
yellow =(255,223,0)

# Huvudkaraktär position 
circle_x, circle_y = 40, 300
circle_radius = 40
circle_speed_x = 10
circle_speed_y = 0
jump_strength = -10
gravity = 0.5
on_ground = False
doublejump = False  

#Liv och skada
hearts = 3
tagen_skada = False

fiende_x, fiende_y = 400, 530
fiende_storlek = 80
fiende_speed_x = -5 

#vinna grejer
cube_x, cube_y = 760, 560
cube_size = 40  

#Spik 1
spik_x, spik_y = 400, 160
spik_x_storlek = 20

# Text
font = pygame.font.Font(None, 74)
small_font = pygame.font.Font(None, 36)

level = 1  # Level
startmenu = True
gameover = False
onplatform = False

def show_start_menu(): #startskärm
    screen.fill(black)
    title_text = font.render("Welcome to the Game!", True, white)
    start_text = small_font.render("Press enter to begin", True, white)
    screen.blit(title_text, (800 // 2 - title_text.get_width() // 2, 200))
    screen.blit(start_text, (800 // 2 - start_text.get_width() // 2, 300))  
    pygame.display.flip()

def show_gameover(): #game over skärm
    screen.fill(black)
    gameover_text = font.render("Game Over!", True, red)
    restart_text = small_font.render("Press enter to try again", True, white)
    screen.blit(gameover_text, (800 // 2 - gameover_text.get_width() // 2, 250))
    screen.blit(restart_text, (800 // 2 - restart_text.get_width() // 2, 350))
    pygame.display.flip()

def environment(level):#level system
    title_text = font.render(f"Level {level}", True, white)
    screen.blit(title_text, (10, 30))


def lives(hearts):   #Life counter and damage calculater
        life_text = small_font.render(f"Lives {hearts}", True, white)
        screen.blit(life_text, (700,30))

# Huvudloop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif startmenu and event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN: #startmeny spelet startar vid enter
            startmenu = False
        elif gameover and event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN: #gameover spelet startar om vid enter
            if event.key == pygame.K_RETURN: #reset spelet
                circle_x, circle_y = 40, 300
                fiende_x, fiende_y = 400, 530
                fiende_speed_x = 5
                level = 1
                hearts = 3
                gameover = False
            elif event.key == pygame.K_RETURN:
                pygame.quit()
                sys.exit()
    if startmenu:
        show_start_menu()
        continue
    elif gameover:
        show_gameover()
        continue  

    # Tangenttryckningar
    keys = pygame.key.get_pressed()

    #x-led rörelse
    if keys[pygame.K_LEFT]:
        circle_x -= circle_speed_x
    if keys[pygame.K_RIGHT]:
        circle_x += circle_speed_x

    # Hopp och dubbelhopp
    if keys[pygame.K_UP] and on_ground:
        circle_y -= 5
        circle_speed_y = jump_strength
        on_ground = False
        doublejump = True
    elif keys[pygame.K_UP] and doublejump and circle_y < 500:
        circle_speed_y = jump_strength
        doublejump = False
        
    # snabbt ner
    if keys[pygame.K_DOWN] and on_ground == False and onplatform== False:
        gravity *= 1.25
        damage = 2
    else:
        gravity = 0.5
    
    # Gravitation och vertikal rörelse
    if onplatform == False:
        circle_speed_y += gravity
        circle_y += circle_speed_y

    # Begränsar cirklerns rörelse
    circle_x = max(circle_radius, min(800 - circle_radius, circle_x))
    if circle_y >= 600 - circle_radius: #om cirklen är innanför
        circle_y = 600 - circle_radius
        circle_speed_y = 0
        on_ground = True
        gravity = 0.5
        doublejump = False
        
    # Uppdatera level 
    if level == 1 and circle_x == 760 and circle_y == 560: ##level 1
        circle_x = 0
        circle_y = 560
        fiende_x = 150
        fiende_y = 520
        level += 1
    
    if level == 2:
        fiende_speed_x = 10

    # Fiende rörelse i x led
    
    fiende_x += fiende_speed_x
    if level == 1 and fiende_x >= 750 or fiende_x <= 0:
        fiende_speed_x *= -1 
    if level == 2 and fiende_x >= 720:
        fiende_x = 150
    
    # Kontrollera kollision med fienden
    fiende_kollision = (circle_x + 30 >= fiende_x and circle_x - 30 <= fiende_x + fiende_storlek and circle_y + circle_radius >= 560)
    if fiende_kollision and not on_ground:
        fiende_x = -100
        fiende_y = -100
        fiende_speed_x = 0
        tagen_skada = True
    if fiende_kollision and on_ground and not tagen_skada:
        fiende_speed_x *= -1
        hearts -= 1
        if hearts == 0:
            gameover = True     
        tagen_skada = True
    
    #Kollision och damage av spiken
    spik_kollision = (circle_x + 30 >= spik_x and circle_x -30 <= spik_x + spik_x_storlek and circle_y <= spik_y + 20)
    if spik_kollision and not fiende_kollision and not tagen_skada:    
            hearts-=1    
            tagen_skada = True 
            if hearts == 0:
                gameover = True

    if not (fiende_kollision or spik_kollision):
        tagen_skada = False  



    #Uppdatera skärmen
    screen.blit(background_image, (0, 0))
    #Rita spikar
    pygame.draw.polygon(screen, (silver),((430,0),(370,0),(400,160)))

    if gravity == 0.5:
        pygame.draw.circle(screen, black, (int(circle_x), int(circle_y)), circle_radius)
        if keys[pygame.K_LEFT] or keys[pygame.K_RIGHT]:
            pygame.draw.circle(screen, blue, (int(circle_x), int(circle_y)), int(circle_radius * 0.8))
    
    else: #extra efffekter om man gör attack ner
        pygame.draw.line(screen,black, (int(circle_x),int(circle_y)), (int(circle_x),int(circle_y-100)) ,8)
        pygame.draw.line(screen,black, (int(circle_x-20),int(circle_y)), (int(circle_x-30),int(circle_y-100)) ,8)
        pygame.draw.line(screen,black, (int(circle_x+20),int(circle_y)), (int(circle_x+30),int(circle_y-100)) ,8)
        pygame.draw.circle(screen, red, (int(circle_x), int(circle_y)), circle_radius)
    #fiende 
    pygame.draw.rect(screen, red, (fiende_x, fiende_y, fiende_storlek, fiende_storlek))
    #level
    
    environment(level)
    #Life counter
    lives(hearts)   
    
    if level == 1: #level 1 goal
        cube_x, cube_y = 760, 560
        cube_size = 40  # Size of the cube
        pygame.draw.rect(screen, yellow, (cube_x - cube_size // 2, cube_y - cube_size // 2, cube_size, cube_size))



##Hinder

    #Skapar ett hinder och ger den en hitbox
    obstacles = []
    if level == 1: #level 1 hinder
        obstacle1 = pygame.Rect(100, 450, 200, 40)
        obstacle2 = pygame.Rect(400, 350, 70, 250)
        obstacles =  [obstacle1, obstacle2]

    for obstacle in obstacles:
        pygame.draw.rect(screen, black, obstacle)   
    circle_rect = pygame.Rect(circle_x - circle_radius, circle_y - circle_radius, circle_radius * 2, circle_radius * 2)
    
    onplatform = False
    
    for obstacle in obstacles: #ger möjdlighet med olika hinder varje nivå
        if circle_rect.colliderect(obstacle):
            
            # över platformen
            if circle_y + circle_radius >= obstacle.top and circle_y <= obstacle.top:
                circle_speed_y = 0
                onplatform = True
                on_ground = True
                doublejump = True
                if circle_y + circle_radius > obstacle.top + 5 and circle_y < obstacle.top +5: #temporärt fixar bugg med att man hamnar i platformen
                    circle_y -= 10
                
            # vänster om platform
            elif circle_x + circle_radius > obstacle.left and circle_x < obstacle.left:
                circle_x = obstacle.left - circle_radius   
            #höger om platform
            elif circle_x - circle_radius < obstacle.right and circle_x > obstacle.right:
                circle_x = obstacle.right + circle_radius
            #under
            elif circle_y - circle_radius < obstacle.bottom and circle_y > obstacle.bottom:
                circle_y = obstacle.bottom + circle_radius
                circle_speed_y = max(circle_speed_y, 5)  
        if not onplatform:
            onplatform = False



    pygame.display.flip()
    pygame.time.delay(25)


